# For my final in NRS 568 I wanted to create a user friendly toolbox in python that used 3 tools.
# This toolbox will contain three (3) tools, including a List feature tool, a 5-meter Buffer tool, and an NDVI Calculator.
# Example data to practice with is provided in the accompanying .zip file.

# Example data to practice with is provided.

import arcpy


class Toolbox(object):
    def __init__(self):
        """Define the toolbox (the name of the toolbox is the name of the .pyt file)."""
        self.label = "BarthaFinalToolbox" # What the toolbox will be called in ArcMap
        self.alias = ""
        self.tools = [NDVI_Create, ListShapefiles, Buffer5meters]  # List of tool classes associated with this toolbox


class NDVI_Create(object):
    def __init__(self):
        """Define the tool (tool name is the name of the class)."""
        self.label = "NDVI Creation" # What the tool will be called in ArcMap
        self.description = "This tool will take in two satellite imagery files and create an NDVI output."
        self.canRunInBackground = False

    def getParameterInfo(self):
        """Define parameter definitions"""
        parameters = []
        red_band = arcpy.Parameter(name="red_band", # Variable name
                                 displayName="Enter location for Red Band:", # Display text on screen
                                 datatype="GPRasterLayer", # Type of data needed
                                 parameterType="Required", # Required|Optional|Derived
                                 direction="Input") # Input|Output
        parameters.append(red_band)

        NIR_band = arcpy.Parameter(name="NIR_band",
                                 displayName="Enter location for Near-infrared Band:",
                                 datatype="GPRasterLayer",
                                 parameterType="Required",
                                 direction="Input")
        parameters.append(NIR_band)

        ndvi_output = arcpy.Parameter(name="ndvi_output",
                                      displayName="Enter a location and name for the NDVI output:",
                                      datatype="GPRasterLayer",
                                      parameterType="Required",
                                      direction="Output")
        parameters.append(ndvi_output)
        return parameters

    def isLicensed(self):
        """Set whether tool is licensed to execute."""
        return True

    def updateParameters(self, parameters):
        """Modify the values and properties of parameters before internal
        validation is performed.  This method is called whenever a parameter
        has been changed."""
        return

    def updateMessages(self, parameters):
        """Modify the messages created by internal validation for each tool
        parameter.  This method is called after internal validation."""
        return

    def execute(self, parameters, messages):
        """The source code of the tool."""
        red_band = parameters[0].valueAsText
        NIR_band = parameters[1].valueAsText
        ndvi_output = parameters[2].valueAsText

        arcpy.gp.RasterCalculator_sa('Float("' + NIR_band + '"-"' + red_band + '") / Float("' + NIR_band + '"+"' + red_band + '")',
        ndvi_output)

        arcpy.AddMessage("Finished creating NDVI output.")
        return

class ListShapefiles(object):
    def __init__(self):
        """Define the tool (tool name is the name of the class)."""
        self.label = "List Shapefiles" # What the tool will be called in ArcMap
        self.description = "This tool will search a provided folder and list all the shapefiles of a certain type."
        self.canRunInBackground = False

    def getParameterInfo(self):
        """Define parameter definitions"""
        parameters = []
        shp_folder = arcpy.Parameter(name="shp_folder",
                                     displayName="Enter the folder you want to search:",
                                     datatype="DEFolder",
                                     parameterType="Required",
                                     direction="Input")
        parameters.append(shp_folder)

        feature_type = arcpy.Parameter(name="feature_type",
                                    displayName="Enter the type of feature class to find:",
                                    datatype="GPString",
                                    parameterType="Required",
                                    direction="Input")
        parameters.append(feature_type)
        return parameters

    def isLicensed(self):
        """Set whether tool is licensed to execute."""
        return True

    def updateParameters(self, parameters):
        """Modify the values and properties of parameters before internal
        validation is performed.  This method is called whenever a parameter
        has been changed."""
        return

    def updateMessages(self, parameters):
        """Modify the messages created by internal validation for each tool
        parameter.  This method is called after internal validation."""
        return

    def execute(self, parameters, messages):
        """The source code of the tool."""
        shp_folder = parameters[0].valueAsText
        feature_type = parameters[1].valueAsText

        arcpy.env.workspace = shp_folder
        featureList = arcpy.ListFeatureClasses("*", feature_type)
        arcpy.AddMessage("The " + feature_type + " shapefiles are " + str(featureList) + ".")
        arcpy.AddMessage("The number of " + feature_type + " shapefiles are " + str(len(featureList)) + ".")
        return


class Buffer5meters(object):
    def __init__(self):
        """Define the tool (tool name is the name of the class)."""
        self.label = "Buffer 5-meters Tool" # What the tool will be called in ArcMap
        self.description = "This tool will take up to three feature class objects and apply a 5-meter buffer."
        self.canRunInBackground = False

    def getParameterInfo(self):
        """Define parameter definitions"""
        parameters = []
        shp1 = arcpy.Parameter(name="shp1",
                               displayName="Enter shapefile you want to buffer:",
                               datatype="DEFeatureClass",
                               parameterType="Required",
                               direction="Input")
        parameters.append(shp1)

        shp1_output = arcpy.Parameter(name="shp1_output",
                                      displayName="Enter a location and name for the buffered output:",
                                      datatype="DEFeatureClass",
                                      parameterType="Required",
                                      direction="Output")
        parameters.append(shp1_output)
        return parameters

    def isLicensed(self):
        """Set whether tool is licensed to execute."""
        return True

    def updateParameters(self, parameters):
        """Modify the values and properties of parameters before internal
        validation is performed.  This method is called whenever a parameter
        has been changed."""
        return

    def updateMessages(self, parameters):
        """Modify the messages created by internal validation for each tool
        parameter.  This method is called after internal validation."""
        return

    def execute(self, parameters, messages):
        """The source code of the tool."""
        shp1 = parameters[0].valueAsText
        shp1_output = parameters[1].valueAsText

        inputFeatures = shp1
        outputFeatures = shp1_output
        distance = "5 meters"
        sideType = "FULL"
        lineEndType = "ROUND"
        dissolveOption = "NONE"
        dissolveField = "#"
        method = "PLANAR"

        arcpy.Buffer_analysis(inputFeatures, outputFeatures, distance, sideType,
                              lineEndType, dissolveOption, dissolveField, method)

        arcpy.AddMessage("Buffered shapefile created!")
        return
